import pandas as pd

import numpy as np

from sklearn import svm, datasets

import matplotlib.pyplot as plt
from sklearn.metrics 
import accuracy_score
from sklearn.model_selection 
import train_test_split
from sklearn.model_selection 
import GridSearchCV
from sklearn.metrics 
import classification_report
from sklearn.utils
import shuffle

iris = datasets.load_iris()

A = iris.data[:, :2] # we only take the first two features.

B = iris.target


# Plot resulting Support Vector boundaries with original data

# Create fake input data for prediction that we will use for plotting

# create a mesh to plot in 

a_min, a_max = X[:, 0].min() - 1, A[:, 0].max() + 1
b_min, b_max = A[:, 1].min() - 1, A[:, 1].max() + 1

h = (a_max / a_min)/100

aa, bb = np.meshgrid(np.arange(a_min, a_max, h),
 
np.arange(b_min, b_max, h))

A_plot = np.c_[aa.ravel(), bb.ravel()]


# Create the SVC model object
C = 1.0 
# SVM regularization parameter

svc = svm.SVC(kernel='linear', C=C, decision_function_shape='ovr').fit(A, B)

Z = svc.predict(A_plot)

Z = Z.reshape(aa.shape)


plt.figure(figsize=(25, 15))

plt.subplot(121)
plt.contourf(aa, bb, Z, cmap=plt.cm.tab10, alpha=0.2)

plt.scatter(A[:, 0], A[:, 1], c=b, cmap=plt.cm.Set1)

plt.xlabel('Sepal length')

plt.ylabel('Sepal width')

plt.xlim(aa.min(), aa.max())

plt.title('SVC with linear kernel')


# Create the SVC model object
C = 1.0
 # SVM regularization
 parameter
svc = svm.SVC(kernel='rbf', C=C, decision_function_shape='ovr').fit
(A, B)

Z = svc.predict(A_plot)

Z = Z.reshape(aa.shape)


plt.subplot(122)

plt.contourf(aa, bb, Z, cmap=plt.cm.tab10, alpha=0.2)

plt.scatter(A[:, 0], A[:, 1], c=y, cmap=plt.cm.Set1)

plt.xlabel('Sepal length')

plt.ylabel('Sepal width')

plt.xlim(aa.min(), aa.max())

plt.title('SVC with RBF kernel')

plt.show()

# shuffle the dataset
X, 
B = shuffle(A, B, random_state=0)

# Split the dataset in two equal parts

X_train, X_test, y_train, y_test = train_test_split(
    A, B, test_size=0.25, random_state=0)


# Set the parameters by cross-validation
parameters = [{'kernel': ['rbf'],
               'gamma': [1e-4, 1e-3, 0.01, 0.1, 0.2, 0.5],
                'C': [1, 10, 100, 1000]},
              {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]

print("# Tuning hyper-parameters")

print()

clf = GridSearchCV(svm.SVC(decision_function_shape='ovr'), parameters, cv=5)
clf.fit(X_train, y_train)


print("Best parameters set found on development set:")

print()

print(clf.best_params_)

print()

print("Grid scores on training set:")

print()
means = clf.cv_results_['mean_test_score']
stds = clf.cv_results_['std_test_score']
for mean, std, params in zip(means, stds, clf.cv_results_['params']):
   
print("%0.3f (+/-%0.03f) for %r"
          % (mean, std * 2, params))


print()

print("Detailed classification report:")

print()

print("The model is trained on the full development set.")
print("The scores are computed on the full evaluation set.")
print()
y_true, y_pred = y_test, clf.predict(X_test)
print(classification_report(y_true, y_pred))

print()

score=accuracy_score(y_true, y_pred)

print(score)